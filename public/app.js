//const exercises = require("..exercises");
const multiplesComments =
  "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.";

function multiples(sum = 0, i = 0, limit = 1000) {
  var sum = sum;
  if (i < limit) {
    if (i % 3 == 0 || i % 5 == 0) {
      sum = sum + i;
    }
    i++;
    return multiples(sum, i);
  }
  return {
    sum,
    comments: multiplesComments,
    name: "Multiples of 3 and 5"
  };
}

const fibonacciComments =
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";

function fibonacci(prev = 1, curr = 2, sum = 0, limit = 4000000) {
  var prev = prev,
    curr = curr,
    sum = sum,
    temp;
  if (curr % 2 == 0) sum = sum + curr;
  temp = curr + prev;
  if (temp >= limit) {
    return {
      sum,
      name: "Even Fibonacci numbers",
      comments: fibonacciComments
    };
  }
  return fibonacci(curr, curr + prev, sum);
}
const lpfComments =
  "The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?";
function lpf(num = 600851475143) {
  var lpf;
  var sum = 1;
  for (let i = 2; i < Math.floor(Math.sqrt(num)); i++) {
    for (let j = 2; j <= i; j++) {
      if (i % j == 0 && j < i) break;
      if (i == j && i % j == 0) {
        if (num % i == 0) {
          sum = sum * i;
        }
        if (sum == num) {
          lpf = i;
          return {
            sum: lpf,
            name: "Largest prime factor",
            comments: lpfComments
          };
        }
      }
    }
  }
}
const palindromeComments =
  "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99. Find the largest palindrome made from the product of two 3-digit numbers.";
// function palindrome(num1, num2, product = 0, num1it = 0, num2it = 0) {
//   var num1 = num1;
//   var num2 = num2;
//   var product = product;
//   var num1it = num1it;
//   var num2it = num2it;
//   if (num1it == num1) {
//     return {
//       sum: product,
//       comments: palindromeComments,
//       name: "Largest palindrome product"
//     };
//   }
//   let sumInt = (num1 - num1it) * (num2 - num2it);
//   let sum = ((num1 - num1it) * (num2 - num2it)).toString();

// if (sum.length == 5) {
//   if (sum[0] == sum[4] && sum[1] == sum[3] && sumInt > product) {
//     if (num2 == 0) {
//       return palindrome(num1 - 1, 999, sumInt);
//     } else {
//       return palindrome(num1, num2 - 1, sumInt);
//     }
//   }
// }
//   if (sumInt < product) {
//     if (num2it == num2) {
//       return palindrome(num1, num2, product, num1it++, 0);
//     } else {
//       if (num1it == num1) {
//         return {
//           sum: product,
//           comments: palindromeComments,
//           name: "Largest palindrome product"
//         };
//       } else return palindrome(num1, num2, product, num1it, num2it++);
//     }
//   } else {
//     if (sum.length == 5 && sum[0] == sum[4] && sum[1] == sum[3]) {
//       if (num2it == num2) {
//         return palindrome(num1, num2, sumInt, num1it++, 0);
//       } else {
//         if (num1it == num1) {
//           return {
//             sum: product,
//             comments: palindromeComments,
//             name: "Largest palindrome product"
//           };
//         } else return palindrome(num1, num2, sumInt, num1it, num2it++);
//       }
//     } else if (
//       sum.length == 6 &&
//       sum[0] == sum[5] &&
//       sum[1] == sum[4] &&
//       sum[2] == sum[3]
//     ) {
//       if (num2it == num2) {
//         return palindrome(num1, num2, sumInt, num1it++, 0);
//       } else {
//         return palindrome(num1, num2, sumInt, num1it, num2it++);
//       }
//     } else {
//       if (num2it == num2) {
//         return palindrome(num1, num2, product, num1it++, 0);
//       } else {
//         if (num1it == num1) {
//           return {
//             sum: product,
//             comments: palindromeComments,
//             name: "Largest palindrome product"
//           };
//         } else return palindrome(num1, num2, product, num1it, num2it++);
//       }
//     }
//   }
// }

function createProblem(functionName) {
  let problemName = functionName().name,
    problemCode = functionName,
    problemComments = functionName().comments,
    problemAnswer = functionName().sum;
  return `
  <div class="problem">
        <div class="problemName">
          <h2>${problemName}</h2>
        </div>
        <div class="problemBody">
          <div class="problemCode"><pre>${problemCode}</pre></div>
          <div class="problemText">
            <div class="problemComments">${problemComments}</div>
            <div class="problemAnswer" > The answer is:  ${problemAnswer}</div>
          </div>
        </div>
      </div>
  `;
}
var funcs = [multiples, fibonacci, lpf];
window.addEventListener("DOMContentLoaded", function() {
  let problemContainer = document.querySelector(".problemContainer");
  funcs.forEach(function(func) {
    problemContainer.insertAdjacentHTML("beforeend", createProblem(func));
  });
});
