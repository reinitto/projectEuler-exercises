const multiplesComments =
  "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.";

function multiples(sum = 0, i = 0, limit = 1000) {
  var sum = sum;
  if (i < limit) {
    if (i % 3 == 0 || i % 5 == 0) {
      sum = sum + i;
    }
    i++;
    return multiples(sum, i);
  }
  return {
    sum,
    comments: multiplesComments,
    name: "Multiples of 3 and 5"
  };
}

const fibonacciComments =
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";

function fibonacci(prev = 1, curr = 2, sum = 0, limit = 4000000) {
  var prev = prev,
    curr = curr,
    sum = sum,
    temp;
  if (curr % 2 == 0) sum = sum + curr;
  temp = curr + prev;
  if (temp >= limit) {
    return {
      sum,
      name: "Even Fibonacci numbers",
      comments: fibonacciComments
    };
  }
  return fibonacci(curr, curr + prev, sum);
}
const lpfComments =
  "The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?";
function lpf(num) {
  var lpf;
  var sum = 1;
  for (let i = 2; i < Math.floor(Math.sqrt(num)); i++) {
    for (let j = 2; j <= i; j++) {
      if (i % j == 0 && j < i) break;
      if (i == j && i % j == 0) {
        if (num % i == 0) {
          sum = sum * i;
        }
        if (sum == num) {
          lpf = i;
          return {
            sum: lpf,
            name: "Largest prime factor",
            comments: lpfComments
          };
        }
      }
    }
  }
}

module.exports = {
  multiples,
  fibonacci,
  lpf
};
